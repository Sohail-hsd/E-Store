import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router';
import { ToastContainer, toast } from 'react-toastify';
import Head from 'next/head'
import Inputs from '../components/Inputs'
// import User from '../models/User';
import mongoose from 'mongoose'
import Error from 'next/error';
import Link from 'next/link';
const jwt = require('jsonwebtoken');


const ResetPassword = ({ Verification }) => {
    const [show, setShow] = useState(false)
    const [Credentials, setCredentials] = useState({
        Newpassword: '',
        cnewpassword: ''
    })
    const router = useRouter()

    // useEffect(() => {
    //   first
    
    //   return () => {
    //     second
    //   }
    // }, [third])
    

    const CredentialsInputs = [
        {
            key: 8,
            name: 'Newpassword',
            type: show ? 'text' : 'password',
            placeholder: 'New Password',
            errorMessage: 'Password sholud be 3-16 characters and shoud include any 2 special character!',
            label: 'New Password',
            pattern: '^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$',
            required: true,
        },
        {
            key: 9,
            name: 'cnewpassword',
            type: show ? 'text' : 'password',
            placeholder: 'Conform New Password',
            errorMessage: 'Password dose`t matched!',
            label: 'Conform New Password',
            pattern: Credentials['Newpassword'],
            required: true,
        }
    ]

    const onCredintialsChange = (event) => {
        setCredentials({ ...Credentials, [event.target.name]: event.target.value })
        console.log(Credentials)
    }

    const resetPassword = async (event) => {
        event.preventDefault()
        console.log(Credentials.Newpassword)
        // let data = { Credentials.Newpassword, Credentials.cnewpassword, sendMail: false }
        let response = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Account/forgot`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'authorization': `${localStorage.getItem('token')}`
            },
            body: JSON.stringify(Credentials)
        })
        response = await response.json()
        console.log(response)
        if (response.success) {
            toast.success("Your password is reset. Thank you!", {
                position: "top-center",
                autoClose: 2000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
            router.push(`/login`)
        }
        else {
            toast.error("Sorry, Error Ouccer!", {
                position: "top-center",
                autoClose: 3000,
                hideProgressBar: true,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
            return;
        }

    }
    if (!Verification) {

        return <Error statusCode={404} />
    }
    return (
        <div className="min-h-screen flex items-start justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-900">
            <Head>
                <title>Reset Password</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/logo.png" />
            </Head>
            <ToastContainer
                position="top-center"
                autoClose={2000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
            />
            <div className="max-w-md w-full space-y-8">
                <div>
                    <img
                        className="mx-auto h-12 w-auto green-pic"
                        src="https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg"
                        alt="Workflow"
                    />
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-white">Reset Password</h2>
                </div>

                {Verification &&
                    <form className="mt-8 space-y-6" onSubmit={resetPassword} method="POST">
                        <input type="hidden" name="remember" value="true" />
                        <div className="rounded-md shadow-sm space-y-2">

                            {CredentialsInputs.map(input => (
                                <Inputs
                                    key={input.key}
                                    {...input}
                                    value={Credentials[input.name]}
                                    onChange={onCredintialsChange}
                                    show={show}
                                />
                            ))
                            }
                        </div>

                        <div className="flex items-center mx-5 justify-between">
                            <div className="flex items-center">
                                <input onChange={event => setShow(event.target.checked)} value={show} id="remember-me" name="remember-me" type="checkbox" className="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                <label htmlFor="remember-me" className="ml-2 block text-sm text-white"> Show Password </label>
                            </div>
                            <div className="text-sm">
                                <Link href={'/login'}>
                                    <a className="font-medium text-green-600 hover:text- -500">Go back to login.</a>
                                </Link>
                            </div>
                        </div>

                        <div>
                            <button disabled={Credentials.Newpassword !== Credentials.cnewpassword || Credentials.Newpassword.length === 0 || Credentials.cnewpassword.length === 0 ? true : false} type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-green-300">
                                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                                    {/* <!-- Heroicon name: solid/lock-closed --> */}
                                    <svg className="h-5 w-5 text-green-500 group-hover:text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                                    </svg>
                                </span>
                                Reset Password
                            </button>
                        </div>
                    </form>}
            </div>
        </div>
    )
}

export async function getServerSideProps(context) {
    if (!mongoose.connection.readyState) {
        mongoose.connect(process.env.MONGO_URI)

    }
    let Verification = null
    let token = context.query.token
    // Verifing Rest token --- [Done]
    try {
        let decoded = jwt.verify(token, process.env.JWT_SECRET_KEY);
        if (decoded) {
            return {
                props: { Verification: true }
            }
        }
    }
    catch {
        return {
            props: { Verification: false }
        }
    }

}

export default ResetPassword