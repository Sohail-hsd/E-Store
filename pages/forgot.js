import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router';
import { ToastContainer, toast } from 'react-toastify';
import Head from 'next/head'


const Forgot = () => {
    const [forgetEmail, setForgetEmail] = useState('')
    const [Newpassword, setNewpassword] = useState('')
    const [cpassword, setcpassword] = useState('')
    const router = useRouter()

    useEffect(() => {
        if (localStorage.getItem('token')) {
            router.push('/')
        }
    }, [])
    const forgetenPassword = async (event) => {
        event.preventDefault()
        console.log(forgetEmail)
        let data = { forgetEmail, sendMail: true }
        let response = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Account/forgot`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'authorization': `${localStorage.getItem('token')}`
            },
            body: JSON.stringify(data)
        })
        response = await response.json()
        console.log(response)
        if (response.success) {
            toast.success("Password reset instructions is send to your email. Thank you!", {
                position: "top-center",
                autoClose: 2000,
                hideProgressBar: false,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
        }
        else {
            toast.error("Sorry, Error Ouccer!", {
                position: "top-center",
                autoClose: 3000,
                hideProgressBar: true,
                closeOnClick: true,
                pauseOnHover: true,
                draggable: true,
                progress: undefined,
            });
            return;
        }
    }

    const resetPassword = async (event) => {
        event.preventDefault()
        if (Newpassword === cpassword) {
            console.log(Newpassword)
            let data = { forgetEmail, sendMail: false, Newpassword }
            let response = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Account/forgot`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'authorization': `${localStorage.getItem('token')}`
                },
                body: JSON.stringify(data)
            })
            response = await response.json()
            console.log(response)
            if (response.success) {
                toast.success("Your password is reset. Thank you!", {
                    position: "top-center",
                    autoClose: 2000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                });
                router.push(`/login`)
            }
            else {
                toast.error("Sorry, Error Ouccer!", {
                    position: "top-center",
                    autoClose: 3000,
                    hideProgressBar: true,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                });
                return;
            }
        }

    }

    return (
        <div className="min-h-screen flex items-start justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gray-900">
            <Head>
                <title>Forget Password</title>
                <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
            <ToastContainer
                position="top-center"
                autoClose={2000}
                hideProgressBar={false}
                newestOnTop={false}
                closeOnClick
                rtl={false}
                pauseOnFocusLoss
                draggable
                pauseOnHover
            />
            <div className="max-w-md w-full space-y-8">
                <div>
                    <img
                        className="mx-auto h-12 w-auto green-pic"
                        src="https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg"
                        alt="Workflow"
                    />
                    <h2 className="mt-6 text-center text-3xl font-extrabold text-white">Forget Password</h2>
                    <p className="mt-2 text-center text-sm text-gray-600">
                        Or
                        <Link href={'/login'}>
                            <a className="font-medium text-green-600 hover:text-green-500"> SignIn </a>
                        </Link>
                    </p>
                </div>

                {!router.query.token &&
                    <form className="mt-8 space-y-6" onSubmit={forgetenPassword} method="POST">
                        <div className="rounded-md shadow-sm -space-y-px">
                            <div>
                                <label htmlFor="email" className="sr-only">Email address</label>
                                <input onChange={(event) => setForgetEmail(event.target.value)} value={forgetEmail} id="email-address" name="email" type="email" autoComplete="email" required className="appearance-none rounded-md relative block w-full px-3 py-2 border-2 border-green-300 placeholder-gray-500 text-black focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm" placeholder="Type your email" />
                            </div>
                        </div>
                        <div>
                            <button type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                                    {/* <!-- Heroicon name: solid/lock-closed --> */}
                                    <svg className="h-5 w-5 text-green-500 group-hover:text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                                    </svg>
                                </span>
                                Continue
                            </button>
                        </div>
                    </form>}

                {router.query.token &&
                    <form className="mt-8 space-y-6" onSubmit={resetPassword} method="POST">
                        <div className="rounded-md shadow-sm -space-y-px">
                            <div>
                                <label htmlFor="password" className="sr-only">New Password</label>
                                <input onChange={(event) => setNewpassword(event.target.value)} value={Newpassword} id="password" name="password" type="password" autoComplete="password" required className="appearance-none rounded-md relative block w-full px-3 py-2 border-2 border-green-300 placeholder-gray-500 text-black focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm" placeholder="New Password" />
                            </div>
                        </div>
                        <div className="rounded-md shadow-sm -space-y-px">
                            <div>
                                <label htmlFor="cpassword" className="sr-only">Conform New Password</label>
                                <input onChange={(event) => setcpassword(event.target.value)} value={cpassword} id="cpassword-address" name="cpassword" type="password" autoComplete="cpassword" required className="appearance-none rounded-md relative block w-full px-3 py-2 border-2 border-green-300 placeholder-gray-500 text-black focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm" placeholder="Conform New Password" />
                            </div>
                        </div>
                        <div>
                            <button disabled={Newpassword !== cpassword || Newpassword.length === 0 || cpassword.length === 0 ? true : false} type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:bg-green-300">
                                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                                    {/* <!-- Heroicon name: solid/lock-closed --> */}
                                    <svg className="h-5 w-5 text-green-500 group-hover:text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                                    </svg>
                                </span>
                                Reset Password
                            </button>
                        </div>
                    </form>}
            </div>
        </div>
    )
}

export default Forgot