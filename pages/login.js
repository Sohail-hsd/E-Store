import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { ToastContainer, toast } from 'react-toastify';
import { useRouter } from 'next/router';
import Head from 'next/head'
import Inputs from '../components/Inputs'

const Login = (user) => {
  const [remember, setRemember] = useState(false)
  const [Credentials, setCredentials] = useState({
    email: '',
    password: ''
  })

  const router = useRouter()

  const CredentialsInputs = [
    {
      key: 2,
      name: 'email',
      type: 'email',
      placeholder: 'Email',
      errorMessage: 'It should be a valid email address!',
      label: 'Email',
      required: true,
    },
    {
      key: 8,
      name: 'password',
      type: 'password',
      placeholder: 'Password',
      errorMessage: 'Invalid Password',
      label: 'Password',
      // pattern: '^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$',
      required: true,
    },
  ]

  useEffect(() => {
    if (localStorage.getItem('token') && user.value != null) {
      router.push(`/`)
    }
  }, [])

  const onCredintialsChange = (event) => {
    setCredentials({ ...Credentials, [event.target.name]: event.target.value })
    console.log(Credentials)
  }

  const login = async (event) => {
    event.preventDefault()
    // const loginData = { email, password }
    console.log(remember)

    const response = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Account/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(Credentials)
    })
    response = await response.json()
    if (response.status) {
      localStorage.setItem('token', response.token)
      toast.success('Your are logedin!', {
        position: "top-center",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
      setCredentials({ ...Credentials, ["email"]: '' })
      setCredentials({ ...Credentials, ["password"]: '' })
      setTimeout(() => {
        router.push('/')
      }, 2000);
    } else {
      toast.error('Invalid Email Or Password', {
        position: "top-center",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
      });
    }
  }

  return (
    <div className="min-h-screen flex items-start justify-center py-12 px-4 sm:px-6 lg:px-8  bg-gray-900">
      <Head>
        <title>Signin - E-Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <ToastContainer
        position="top-center"
        autoClose={2000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <div className="max-w-md w-full space-y-8">
        <div>
          <img
            className="mx-auto h-12 w-auto green-pic"
            src="https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg"
            alt="Workflow"
          />
          <h2 className="mt-6 text-center text-3xl font-extrabold text-white">Sign in to your account</h2>
          <p className="mt-2 text-center text-sm text-white">
            Or
            <Link href={'/signup'}>
              <a className="font-medium text-green-600 hover:text-green-500"> SignUp </a>
            </Link>
          </p>
        </div>
        <form className="mt-8 space-y-6" onSubmit={login} method="POST">
          <input type="hidden" name="remember" value="true" />

          <div className="rounded-md shadow-sm space-y-2">
            {CredentialsInputs.map(input => (
              <Inputs
                key={input.key}
                {...input}
                value={Credentials[input.name]}
                onChange={onCredintialsChange}
              />
            ))
            }
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input onChange={event => setRemember(event.target.checked)} value={remember} id="remember-me" name="remember-me" type="checkbox" className="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
              <label htmlFor="remember-me" className="ml-2 block text-sm text-white"> Remember me </label>
            </div>

            <div className="text-sm">
              <Link href={'/forgot'}>
                <a className="font-medium text-green-600 hover:text- -500"> Forgot your password? </a>
              </Link>
            </div>
          </div>

          <div>
            <button type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
              <span className="absolute left-0 inset-y-0 flex items-center pl-3">
                {/* <!-- Heroicon name: solid/lock-closed --> */}
                <svg className="h-5 w-5 text-green-500 group-hover:text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                  <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                </svg>
              </span>
              Sign in
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default Login